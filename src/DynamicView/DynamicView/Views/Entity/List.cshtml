@model DynamicView.Models.ListPageOutModel
@{
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
}

<!-- BEGIN PAGE LEVEL STYLES -->
<link rel="stylesheet" type="text/css" href="/assets/global/plugins/select2/select2.css" />
<link rel="stylesheet" type="text/css" href="/assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.css" />
<!-- END PAGE LEVEL STYLES -->
<!-- BEGIN PAGE HEADER-->
<h3 class="page-title">
    @Model.MetaData.EntityName
</h3>
<!-- END PAGE HEADER-->
<!-- BEGIN PAGE CONTENT-->
<div class="row">
    <div class="col-md-12">
        <!-- Begin: life time stats -->
        <div class="portlet light">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-table font-green-sharp"></i>
                    <span class="caption-subject font-green-sharp bold uppercase">@Model.MetaData.EntityName</span>
                </div>
                <div class="actions">
                    <a href="@Model.MetaData.CreatePageUrl" class="btn green-haze btn-circle">
                        <i class="fa fa-plus"></i>
                        <span class="hidden-480">
                            Yeni
                        </span>
                    </a>
                    <a href="javascript:;" id="@(Model.EntityType.Name + "_entity_table_deleteButton")" class="btn red-pink btn-circle">
                        <i class="fa fa-remove"></i>
                        <span class="hidden-480">
                            Sil
                        </span>
                    </a>
                    <a class="btn btn-circle btn-icon-only btn-default reload" href="javascript:;" id="@(Model.EntityType.Name + "_entity_table_refresh")" data-original-title="" title="">
                        <i class="icon-refresh"></i>
                    </a>
                    <a class="btn btn-circle btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title="">
                    </a>
                </div>

            </div>
            <div class="portlet-body">
                <div class="table-container">
                    <div class="table-actions-wrapper">
                        <input type="text" id="@(Model.EntityType.Name + "_entity_table_quickSearch")" class="table-group-action-input form-control input-inline input-sm" placeholder="Ara..." />
                    </div>
                    <table class="table table-striped table-bordered table-hover" id="@(Model.EntityType.Name + "_entity_table")">
                        <thead>
                            <tr role="row" class="heading">
                                <th width="2%">
                                    <input type="checkbox" class="group-checkable">
                                </th>
                                @foreach (var item in Model.MetaData.ColumnMetaDatas)
                                {
                                    if (item.ColumnName == "Id")
                                    {
                                        continue;
                                    }

                                    <th>@item.Title</th>
                                }
                                <th width="15%">
                                    İşlemler
                                </th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- End: life time stats -->
    </div>
</div>
<!-- END PAGE CONTENT-->
<!-- BEGIN PAGE LEVEL PLUGINS -->
<script type="text/javascript" src="/assets/global/plugins/select2/select2.min.js"></script>
<script type="text/javascript" src="/assets/global/plugins/datatables/media/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" src="/assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js"></script>
<script type="text/javascript" src="/assets/global/plugins/moment.min.js"></script>
<!-- END PAGE LEVEL PLUGINS -->
<!-- BEGIN PAGE LEVEL SCRIPTS -->
<script src="/assets/global/scripts/datatable.js"></script>
<!-- END PAGE LEVEL SCRIPTS -->

<script>
    jQuery(document).ready(function () {
        var TableAjax = function () {

            var handleRecords = function () {

                var timeout;
                var delay = 200;
                var isLoading = false;
                var lastQuery = "";
                var initComplete = false;

                var table = {
                    name: "@(Model.EntityType.Name + "_entity_table")",
                    get: function () { return $("#" + this.name); },
                    filterSettingsKey: function () { return this.name + "_filterSettings_" + GlobalConfig.HashedValue; },
                    quickSearch: function () { return $("#" + this.name + "_quickSearch"); },
                    quickSearchQuery: function () {
                        if (initComplete === false) {
                            return "";
                        }

                        var searchTerm = $.trim(this.quickSearch().val());
                        return searchTerm.length > 0
                            ? "(substringof('" + searchTerm + "', Title) eq true)"
                            : "";
                    },
                    refreshButton: function () { return $("#" + this.name + "_refresh"); },
                    deleteButton: function () { return $("#" + this.name + "_deleteButton"); },
                    rowCheckBoxName: function () { return this.name + "_id[]"; },
                    startLoadingBlock: function () {
                        Metronic.blockUI({
                            target: "#" + table.name,
                            boxed: true,
                            message: TableLocalizations.loadingMessage
                        });
                    },
                    stopLoadingBlock: function () { Metronic.unblockUI("#" + table.name); }
                };

                var grid = new Datatable();

                grid.init({
                    src: table.get(),
                    onSuccess: function (grid) {
                        // execute some code after table records loaded
                    },
                    onError: function (grid) {
                        // execute some code on network or other general error
                        table.stopLoadingBlock();
                    },
                    onDataLoad: function (grid) {
                        // execute some code on ajax data load
                        isLoading = false;
                    },
                    loadingMessage: TableLocalizations.loadingMessage,
                    dataTable: { // here you can define a typical datatable settings from http://datatables.net/usage/options

                        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/scripts/datatable.js).
                        // So when dropdowns used the scrollable div should be removed.
                        //"dom": "<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'<'table-group-actions pull-right'>>r>t<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>",


                        "bStateSave": GlobalConfig.IsAuthenticated, // save datatable state(pagination, sort, etc) in cookie.
                        "stateSaveCallback": function (settings, data) {
                            // save the filter settings without connecting it to a unique url
                            localStorage.setItem(table.filterSettingsKey(), JSON.stringify(data));
                        },
                        "stateLoadCallback": function (settings) {
                            // read out the filter settings and apply
                            return JSON.parse(localStorage.getItem(table.filterSettingsKey()));
                        },
                        "lengthMenu": [
                            [10, 20, 50, 100, 150, -1],
                            [10, 20, 50, 100, 150, 'All'] // change per page values here
                        ],
                        "pageLength": 10, // default record count per page
                        "processing": false,
                        "language": {
                            "processing": TableLocalizations.loadingMessage
                        },
                        "ajax": {
                            "url": "@Model.MetaData.DataUrl?f=dt&$inlinecount=allpages", // ajax source
                            "type": "GET",
                            "data": function (d) {
                                var params = new Object();
                                params.draw = d.draw;

                                var dTable = table.get().dataTable();
                                var dSettings = dTable.fnSettings();

                                // selectExpand
                                var select = [];
                                var expand = [];

                                $.each(dSettings.aoColumns, function (index, value) {
                                    if (value.bVisible) {
                                        var propName = value.data.replace(/\./g, '/');
                                        if ($.inArray(propName, select) === -1) {
                                            select.push(propName);

                                            if (propName.indexOf("/") > -1) {
                                                var expandName = propName.substring(0, propName.indexOf("/"));
                                                if ($.inArray(expandName, expand) === -1) {
                                                    expand.push(expandName);
                                                }
                                            }
                                        }
                                    }
                                });

                                if (select.length > 0)
                                    params.$select = select.toString();

                                if (expand.length > 0)
                                    params.$expand = expand.toString();

                                // orderby
                                var orderby = [];

                                $.each(d.order, function (index, value) {
                                    orderby.push(dSettings.aoColumns[value.column].data.replace(/\./g, '/') + " " + value.dir);
                                });

                                if (orderby.length > 0)
                                    params.$orderby = orderby;

                                // skip top
                                if (d.length > 0) {
                                    params.$skip = d.start;
                                    params.$top = d.length;
                                }

                                // filter
                                var filters = [];

                                // quickSearch
                                var quickSearchQuery = table.quickSearchQuery();
                                if (quickSearchQuery.length > 0) {
                                    filters.push(quickSearchQuery);
                                }

                                if (filters.length > 0) {
                                    var filterQuery = "";

                                    $.each(filters, function (index, value) {
                                        if (index > 0) {
                                            filterQuery += " and ";
                                        }
                                        filterQuery += "(" + value + ")";
                                    });

                                    params.$filter = filterQuery;
                                }

                                return params;
                            }
                        },
                        "columns": [
                            {
                                "data": "Id",
                                "render": function (data, type, row) {
                                    return '<input type="checkbox" name="' + table.rowCheckBoxName() + '" value="' + data + '">';
                                }
                            },
                            @Html.Raw(string.Join(",", Model.MetaData.ColumnMetaDatas.Where(c => c.ColumnName != "Id").Select(c => string.Format("{{\"data\":\"{0}\",\"orderable\":{1},\"defaultContent\":\"\"{2}{3}}}", c.ColumnName, c.Orderable.ToString().ToLower(), (string.IsNullOrEmpty(c.ColumnType) ? "" : string.Format(", \"type\":\"{0}\"", c.ColumnType)), (string.IsNullOrEmpty(c.Renderer) ? "" : string.Format(", \"render\": function (data, type, row) {{{0}}}", c.Renderer))))))
                            ,
                            {
                                "data": "Id",
                                "orderable": false,
                                "visible": true,
                                "render": function (data, type, row) {
                                    return '<a href="@Model.MetaData.DetailPageUrl' + data + '" class="btn btn-xs default btn-editable"><i class="fa fa-search"></i> ' + TableLocalizations.viewButton + '</a>';
                                }
                            }
                        ],
                        "order": [
                            [1, "asc"]
                        ],// set first column as a default sort by asc
                        "initComplete": function (settings, json) {
                            initComplete = true;
                        }
                    }
                });

                $('.portlet > .portlet-title .reload').tooltip({
                    container: 'body',
                    title: TableLocalizations.reload
                });

                table.refreshButton().click(function () {
                    table.startLoadingBlock();
                    table.get().DataTable().ajax.reload(function () { table.stopLoadingBlock(); }, false);
                });

                table.quickSearch().keyup(function () {
                    var searchTerm = $.trim(table.quickSearch().val());
                    if (searchTerm !== lastQuery) {
                        lastQuery = searchTerm;

                        if (timeout) {
                            clearTimeout(timeout);
                        }

                        if (!isLoading) {
                            timeout = setTimeout(function () {
                                isLoading = true;
                                table.get().DataTable().ajax.reload();
                            }, delay);
                        }
                    }
                });

                table.deleteButton().click(function () {
                    var checkedRows = $('input[name="' + table.rowCheckBoxName() + '"]:checked');
                    if (checkedRows.length > 0) {
                        bootbox.dialog({
                            message: TableLocalizations.deleteConfirmMessage,
                            title: TableLocalizations.warning,
                            buttons: {
                                cancel: {
                                    label: TableLocalizations.cancelText,
                                    className: "btn-default",
                                    callback: function () {

                                    }
                                },
                                ok: {
                                    label: TableLocalizations.okText,
                                    className: "btn-primary",
                                    callback: function () {

                                        var allVals = [];
                                        checkedRows.each(function () {
                                            allVals.push(this.value);
                                        });

                                        table.startLoadingBlock();

                                        $.ajax({
                                            url: '@Model.MetaData.DeleteUrl',
                                            type: 'DELETE',
                                            data: { "": allVals },
                                            success: function (result) {
                                                toastr["success"](allVals.length > 1 ? TableLocalizations.deletePluralSuccessMessage : TableLocalizations.deleteSingleSuccessMessage, TableLocalizations.success);
                                                table.get().DataTable().ajax.reload(function () { table.stopLoadingBlock(); }, false);
                                            },
                                            statusCode: {
                                                400: function (data) {
                                                    var errors = "";
                                                    $.each(data.responseJSON.ValidationResults, function (index, value) {
                                                        errors += value.ErrorMessage + "<br />";
                                                    });
                                                    toastr["error"](errors, TableLocalizations.error);
                                                    table.stopLoadingBlock();
                                                },
                                                401: function () {
                                                    toastr["error"](TableLocalizations.unAuthorizedMessage, TableLocalizations.error);
                                                    table.stopLoadingBlock();
                                                },
                                                403: function () {
                                                    toastr["error"](TableLocalizations.forbiddenMessage, TableLocalizations.error);
                                                    table.stopLoadingBlock();
                                                },
                                                404: function () {
                                                    toastr["error"](TableLocalizations.notFoundMessage, TableLocalizations.error);
                                                    table.stopLoadingBlock();
                                                },
                                                500: function (data) {
                                                    toastr["error"](data, TableLocalizations.error);
                                                    table.stopLoadingBlock();
                                                }
                                            }
                                        });

                                    }
                                }
                            }
                        });

                    } else {
                        toastr["warning"](TableLocalizations.noRecordSelected, TableLocalizations.warning);
                    }
                });

            }

            return {

                //main function to initiate the module
                init: function () {
                    handleRecords();
                }

            };

        }();

        TableAjax.init(); // init table
    });
</script>
